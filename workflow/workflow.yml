apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: spiderweb-ensemble-
spec:
  entrypoint: merge
  templates:
    - name: ensembles
      steps:
      - - name: generate-files
          template: generate-files
      - - name: readmembers
          template: read-members
      - - name: kratos
          template: run-kratos
          arguments:
            parameters:
            - name: member
              value: "{{item}}"
          withParam: "{{steps.readmembers.outputs.result}}"
      - - name: merge
          template: merge
    
    - name: generate-files
      container:
        image: 149246561375.dkr.ecr.eu-west-1.amazonaws.com/kratos
        command: [python, /src/generate_kratos_files.py]      
      outputs:
        artifacts:
        - name: output
          path: /output
          s3:
            endpoint: s3.amazonaws.com
            bucket: sheetpiles-ml
            key: output
            region: eu-west-1
            accessKeySecret:
              name: my-s3-credentials
              key: accessKey
            secretKeySecret:
              name: my-s3-credentials
              key: secretKey
          archive:
            none: {}      

    - name: read-members
      script:
        image: 149246561375.dkr.ecr.eu-west-1.amazonaws.com/boto3
        workingDir: /data 
        command: [python]
        source: |
          # generate list of memers
          import json
          import boto3
          bucket = 'sheetpiles-ml'
          #Make sure you provide / in the end
          prefix = 'output/'

          client = boto3.client('s3')

          members = []

          for key in client.list_objects(Bucket=bucket, Prefix=prefix, Delimiter='/')['CommonPrefixes']:
             members.append(key['Prefix'].split('/')[1])

          print(json.dumps(members))

    - name: run-kratos
      container:
        image: 149246561375.dkr.ecr.eu-west-1.amazonaws.com/kratos
        command: [python, /src/run_kratos.py]
      inputs:
        parameters:
          - name: member
        artifacts:
        - name: output
          path: /output/{{inputs.parameters.member}}
          s3:
            endpoint: s3.amazonaws.com
            bucket: sheetpiles-ml
            key: output/{{inputs.parameters.member}}
            region: eu-west-1
            accessKeySecret:
              name: my-s3-credentials
              key: accessKey
            secretKeySecret:
              name: my-s3-credentials
              key: secretKey
          archive:
            none: {}
      outputs:
        artifacts:
        - name: output
          path: /output
          s3:
            endpoint: s3.amazonaws.com
            bucket: sheetpiles-ml
            key: final/{{inputs.parameters.member}}
            region: eu-west-1
            accessKeySecret:
              name: my-s3-credentials
              key: accessKey
            secretKeySecret:
              name: my-s3-credentials
              key: secretKey
          archive:
            none: {}   
    - name: merge
      container:
        image: 149246561375.dkr.ecr.eu-west-1.amazonaws.com/kratos
        command: [python, /src/preprocess.py]
      inputs:
        artifacts:
        - name: final
          path: /final
          s3:
            endpoint: s3.amazonaws.com
            bucket: sheetpiles-ml
            key: final
            region: eu-west-1
            accessKeySecret:
              name: my-s3-credentials
              key: accessKey
            secretKeySecret:
              name: my-s3-credentials
              key: secretKey
          archive:
            none: {}
      outputs:
        artifacts:
        - name: pickle
          path: /final/ml_input
          s3:
            endpoint: s3.amazonaws.com
            bucket: sheetpiles-ml
            key: final
            region: eu-west-1
            accessKeySecret:
              name: my-s3-credentials
              key: accessKey
            secretKeySecret:
              name: my-s3-credentials
              key: secretKey
          archive:
            none: {}      